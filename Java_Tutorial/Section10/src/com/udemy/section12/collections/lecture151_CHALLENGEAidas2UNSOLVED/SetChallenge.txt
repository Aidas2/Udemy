Modify the previous HeavenlyBody example so that the HeavenlyBody
class also has a "bodyType" field. This field will store the
type of HeavenlyBody (such as STAR, PLANET, MOON, etc). -->

You can include as many types as you want, but must support at
least PLANET and MOON.

For each of the types that you support, subclass the HeavenlyBody class
so that your program can create objects of the appropriate type.

Although astronomers may shudder at this, our solar systems will
allow two bodies to have the same name as long as they are not the
same type of body: so you could have a star called "BetaMinor" and
an asteroid also called "BetaMinor", for example.

Hint: This is much easier to implement for the Set than it is for the Map,
because the Map will need a key that uses both fields.

There is a restriction that the only satellites that planets can have must
be moons. Even if you don't implement a STAR type, though, your program
should not prevent one being added in the future (and a STAR's satellites
can be almost every kind of HeavenlyBody).

Test cases:
1. The planets and moons that we added in the previous video should appear in
the solarSystem collection and in the sets of moons for the appropriate planets.

2. a.equals(b) must return the same result as b.equals(a) - equals is symmetric.

3. Attempting to add a duplicate to a Set must result in no change to the set (so
the original value is not replaced by the new one). --> due to modification equals() and hashCode();

4. Attempting to add a duplicate to a Map results in the original being replaced
by the new object.

5. Two bodies with the same name but different designations can be added to the same set.

6. Two bodies with the same name but different designations can be added to the same map,
and can be retrieved from the map.

Part1:
1. add field bodyType
2. add enums;
3. rename addMoon
4. modify equals() and hashCode();
5. add toString() method;
Part2:
6. subclass HeavenlyBody (minus final), create three subclasses
7. modify constructors
8. override method addSatellite (add checking of bodyType) in Planet subclass
9. change new heavenlyBody to new Planet, new Moon;
10. use toString() method;
11. HeavenlyBody (plus abstract), rebuild, second Pluto --> dwarf (for condition 5);
11. create and compare two planets (for condition 2);
Part3:
Modify structure of map of solarSystem:
 Map<String, HeavenlyBody> solarSystem  --> Map<HeavenlyBody.Key, HeavenlyBody> solarSystem
by doing this steps:
02:50 create inner class Key in HeavenlyBody class; also contructor, getters,
04:00 override equal() and hashCode();
05:50 call methods of Key from HeavenlyBody
07:25 replace fields name and bodyType, modify accordingly constructor and getters;
08:35 modify toString()
09:15 add method makeKey();
10:30 change key String to key Key
11:05 replace getName() --> getKey();
12:35 add (override) toString() in Key class
13:40 and so on and so on ...