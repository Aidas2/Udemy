sqlite3
sqlite3 test.db
.headers on
create table contacts (name text, phone integer, email text);
insert into contacts (name, phone, email) values ('Tim', 6545678, 'tim@email.com');
SELECT * FROM contacts;
SELECT name, phone, email FROM contacts;
SELECT email FROM contacts;
INSERT into contacts values ('Brian', 1234, 'brian@email.com');
INSERT into contacts (name, phone) values ('Steve', 87654);
.quit
clear

sqlite3 test.db
INSERT INTO contacts VALUES("Avril", "+61 (0)87654321", "avril@email.com.au");
.backup testbackup
UPDATE contacts SET email="steve@hisemail.com";
.restore testbackup
UPDATE contacts SET email="steve@hisemail.com" WHERE name="Steve";
SELECT * FROM contacts WHERE name="Brian";
SELECT phone, email FROM contacts WHERE name="Brian";
DELETE FROM contacts WHERE phone=1234;

.tables
.schema
.dump
.exit
.open test.db

//==============================================================================
cd C:\Users\AidasP\Projects\Udemy_etc\Java_Tutorial\Section_ALL\src\com\udemy\section19\databases\example01\
sqlite3 music.db

SELECT * FROM albums ORDER BY name COLLATE NOCASE DESC;
SELECT * FROM albums ORDER BY artist, name COLLATE NOCASE;
SELECT * FROM songs ORDER BY album, track COLLATE NOCASE;

SELECT songs.track, songs.title, albums.name FROM songs JOIN albums ON songs.album = albums._id;
SELECT songs.track, songs.title, albums.name FROM songs INNER JOIN albums ON songs.album = albums._id;
SELECT songs.track, songs.title, albums.name FROM songs INNER JOIN albums ON songs.album = albums._id ORDER BY albums.name, songs.track;
SELECT albums.name, songs.track, songs.title FROM songs INNER JOIN albums ON songs.album = albums._id ORDER BY albums.name, songs.track;
SELECT artists.name, albums.name FROM artists INNER JOIN albums ON artists._id = albums.artist ORDER BY artists.name;
SELECT artists.name, albums.name FROM albums INNER JOIN artists ON albums.artist = artists._id ORDER BY artists.name;

SELECT artists.name, albums.name, songs.track, songs.title FROM songs
INNER JOIN albums ON songs.album = albums._id
INNER JOIN artists ON albums.artist = artists._id
ORDER BY artists.name, albums.name, songs.track;

SELECT artists.name, albums.name, songs.track, songs.title FROM songs
INNER JOIN albums ON songs.album = albums._id
INNER JOIN artists ON albums.artist = artists._id
WHERE albums._id = 19   // WHERE albums.name = "Doolittle"
ORDER BY artists.name, albums.name, songs.track;

//==============================================================================
CREATE VIEW artist_list AS
SELECT artists.name, albums.name, songs.track, songs.title FROM songs
INNER JOIN albums ON songs.album = albums._id
INNER JOIN artists ON albums.artist = artists._id
ORDER BY artists.name, albums.name, songs.track;
.schema

SELECT * FROM artist_list;
SELECT * FROM artist_list WHERE name LIKE "jefferson%";
//column "name" without table --> name|name:1|title

DROP VIEW artist_list;
CREATE VIEW artist_list AS
SELECT artists.name AS artist, albums.name AS album, songs.track, songs.title FROM songs
INNER JOIN albums ON songs.album = albums._id
INNER JOIN artists ON albums.artist = artists._id
ORDER BY artists.name, albums.name, songs.track;
SELECT * FROM artist_list WHERE artist LIKE "jefferson%";

CREATE VIEW album_list AS
SELECT name FROM albums
ORDER BY name;

SELECT * from album_list;
DROP VIEW album_list;

CREATE VIEW album_list AS
SELECT name FROM albums
ORDER BY name
COLLATE NOCASE;

//==============================================================================
sqlite3 music.db
.backup music-backup2

DELETE FROM songs WHERE track < 50;
SELECT * FROM songs;
SELECT * FROM artist_list;  //what ? VIEW is present :) ?
SELECT * FROM songs WHERE track <> 71;
SELECT count(*) FROM songs;
SELECT count(*) FROM albums;
SELECT count(*) FROM artists;

.restore music-backup2
SELECT count(*) FROM songs;
SELECT count(*) FROM albums;
SELECT count(*) FROM artists;





























